import produce from "immer";

import formattedPrice from "../../utils/formattedPrice";

export const Types = {
  ADD: "cart/ADD",
  REMOVE: "cart/REMOVE",
  UPDATE: "cart/UPDATE"
};

const INITIAL_STATE = [];

export default function cart(state = INITIAL_STATE, action) {
  switch (action.type) {
    case Types.ADD:
      return produce(state, draft => {
        const productIndex = draft.findIndex(p => p.id === action.product.id);
        if (productIndex >= 0) {
          const { amount, price } = draft[productIndex];
          draft[productIndex].amount = amount + 1;
          draft[productIndex].subTotal = formattedPrice(price * (amount + 1));
        } else {
          draft.push({
            ...action.product,
            amount: 1,
            formattedPrice: action.product.formattedPrice,
            subTotal: formattedPrice(action.product.price)
          });
        }
      });
    case Types.REMOVE:
      return produce(state, draft => {
        const productIndex = draft.findIndex(p => p.id === action.id);
        if (productIndex >= 0) {
          draft.splice(productIndex, 1);
        }
      });
    case Types.UPDATE:
      return produce(state, draft => {
        const productIndex = draft.findIndex(p => p.id === action.id);
        if (productIndex >= 0) {
          const { amount, price } = draft[productIndex];
          if (action.action === "INCREMENT") {
            draft[productIndex].amount = draft[productIndex].amount + 1;
            draft[productIndex].subTotal = formattedPrice(price * (amount + 1));
          } else {
            if (draft[productIndex].amount > 1) {
              draft[productIndex].amount = draft[productIndex].amount - 1;
              draft[productIndex].subTotal = formattedPrice(
                price * (amount - 1)
              );
            }
          }
        }
      });
    default:
      return state;
  }
}

export const Creators = {
  addToCart: product => ({
    type: "cart/ADD",
    product
  }),
  removeFromCart: id => ({
    type: "cart/REMOVE",
    id
  }),
  updateProductAtCart: (id, action) => ({
    type: "cart/UPDATE",
    id,
    action
  })
};

// FUNCIONALIDADES
//  Implementar o redux sauce
//  Implementar os sagas
//  Fazer as validações
//  Finalizar a aplicação e enviar para o github
